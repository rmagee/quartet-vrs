"""
Django settings for compose project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import environ
import pprint

env = environ.Env(
    DEBUG=(bool, False),
    SECRET_KEY=(str, ''),
    STAND_ALONE=(bool, False),
    DOCKER=(bool, False),
    VRS_DOCKER_DB=(str,''),
    VRS_DOCKER_DB_USER=(str,''),
    VRS_DOCKER_DB_PWD=(str,''),
    VRS_DOCKER_DB_HOST=(str,''),
    VRS_DB=(str,''),
    VRS_DB_USER=(str,''),
    VRS_DB_PWD=(str,''),
    VRS_DB_HOST=(str,''),
    VRS_DOCKER_DB_PORT=(str,'5432')
)
# reading .env file
environ.Env.read_env()




# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
STAND_ALONE = env('STAND_ALONE')
DOCKER = env('DOCKER')

if DOCKER:
    db = env('VRS_DOCKER_DB')
    user = env('VRS_DOCKER_DB_USER')
    pwd = env('VRS_DOCKER_DB_PWD')
    host = env('VRS_DOCKER_DB_HOST')
    port = env('VRS_DOCKER_DB_PORT')
    os.environ['VRS_DOCKER_DB'] = db
    os.environ['VRS_DOCKER_DB_USER'] = user
    os.environ['VRS_DOCKER_DB_PWD'] = pwd
    os.environ['VRS_DOCKER_DB_HOST'] = host
    os.environ['VRS_DOCKER_DB_PORT'] = port
elif STAND_ALONE:
    db = env('VRS_DB')
    user = env('VRS_DB_USER')
    pwd = env('VRS_DB_PWD')
    host = env('VRS_DB_HOST')
    port = env('VRS_DB_PORT')
    os.environ['VRS_DB'] = db
    os.environ['VRS_DB_USER'] = user
    os.environ['VRS_DB_PWD'] = pwd
    os.environ['VRS_DB_HOST'] = host
    os.environ['VRS_DOCKER_DB_PORT'] = port




ALLOWED_HOSTS = ['*']


# Application definition


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

]

if STAND_ALONE:
    LOCAL_APPS = [
        'quartet_masterdata',
        "quartet_capture",
        "quartet_epcis",
        "quartet_vrs",
    ]
    INSTALLED_APPS=INSTALLED_APPS+LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'quartet_vrs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'quartet_vrs.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

if len(db) > 0:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': db,
            'USER': user,
            'HOST': host,
            'PASSWORD':pwd,
            'PORT': port,
        }
    }

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
print(STATIC_ROOT)

if DEBUG:
    # env_var = os.environ
    # # Print the list of
    # # environment variables
    # print("Environment variables:")
    # pprint.pprint(dict(env_var), width=1)
    pass
